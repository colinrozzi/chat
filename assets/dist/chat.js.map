{
  "version": 3,
  "sources": ["../src/utils/elements.js", "../src/utils/ui.js", "../src/utils/message-chain.js", "../src/utils/formatters.js", "../src/utils/models.js", "../src/utils/typing-indicator.js", "../src/components/chat.js", "../src/components/model-selector.js", "../src/components/message.js", "../src/services/message-handler.js", "../src/services/websocket.js", "../src/components/app.js", "../src/utils/clipboard.js", "../src/index.js", "../src/components/events.js", "../src/utils/responsive.js"],
  "sourcesContent": ["// DOM Elements utilities\n\n// Get DOM elements with safety (returns null if element doesn't exist)\nfunction getElement(id) {\n  return document.getElementById(id);\n}\n\n// Export DOM elements for use across modules\nexport const elements = {\n  messageInput: getElement('messageInput'),\n  sendButton: getElement('sendButton'),\n  generateButton: getElement('generateButton'),\n  messagesContainer: getElement('messagesContainer'),\n  connectionStatus: getElement('connectionStatus'),\n  loadingOverlay: getElement('loadingOverlay'),\n  headId: getElement('headId'),\n  chatSidebar: getElement('chatSidebar'),\n  chatList: getElement('chatList'),\n  currentChatName: getElement('currentChatName'),\n  newChatButton: getElement('newChatButton'),\n  branchChatButton: getElement('branchChatButton'),\n  collapseChatSidebarButton: getElement('collapseChatSidebarButton'),\n  expandChatSidebarButton: getElement('expandChatSidebarButton'),\n  // Chat Controls Sidebar Elements\n  chatControlsSidebar: getElement('chatControlsSidebar'),\n  collapseChatControlsButton: getElement('collapseChatControlsButton'),\n  expandChatControlsButton: getElement('expandChatControlsButton'),\n  controlsModelSelector: getElement('controlsModelSelector'),\n  modelContextWindow: getElement('modelContextWindow'),\n  modelInfo: getElement('modelInfo'),\n  // Stats elements\n  statsMessageCount: getElement('statsMessageCount'),\n  statsTokenCount: getElement('statsTokenCount'),\n  statsTotalCost: getElement('statsTotalCost')\n};\n", "// UI utilities\nimport { elements } from './elements.js';\nimport { chats, currentChatId, totalCost, totalInputTokens, totalOutputTokens, totalMessages } from '../components/app.js';\n\n// Update connection status display\nexport function updateConnectionStatus(status) {\n  elements.connectionStatus.className = 'connection-status ' + status;\n  elements.connectionStatus.innerHTML = `\n    <div class=\"status-indicator\"></div>\n    <span>${status.charAt(0).toUpperCase() + status.slice(1)}</span>\n  `;\n  \n  const isConnected = status === 'connected';\n  elements.sendButton.disabled = !isConnected || !elements.messageInput.value.trim();\n  elements.generateButton.disabled = !isConnected;\n  \n  // Disable generate button if there are no messages yet\n  if (isConnected && window.messageChain.length === 0) {\n    elements.generateButton.disabled = true;\n  }\n}\n\n// Show error message\nexport function showError(message) {\n  console.error('Error:', message);\n  const errorDiv = document.createElement('div');\n  errorDiv.className = 'error-message';\n  errorDiv.innerHTML = `\n    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n      <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n      <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\n      <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\n    </svg>\n    ${message}\n  `;\n  elements.messagesContainer.prepend(errorDiv);\n  setTimeout(() => errorDiv.remove(), 5000);\n  \n  // Hide loading overlay if it's visible\n  elements.loadingOverlay.classList.remove('visible');\n}\n\n// Show success message\nexport function showSuccess(message) {\n  console.log('Success:', message);\n  const successDiv = document.createElement('div');\n  successDiv.className = 'success-message';\n  successDiv.innerHTML = `\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n      <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n      <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n    </svg>\n    ${message}\n  `;\n  elements.messagesContainer.prepend(successDiv);\n  setTimeout(() => successDiv.remove(), 2000);\n}\n\n// Show copy success notification\nexport function showCopySuccess(message) {\n  const successDiv = document.createElement('div');\n  successDiv.className = 'success-message';\n  successDiv.innerHTML = `\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n      <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n      <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n    </svg>\n    ${message}\n  `;\n  elements.messagesContainer.prepend(successDiv);\n  setTimeout(() => successDiv.remove(), 2000);\n}\n\n// Update current chat name in the UI\nexport function updateCurrentChatName() {\n  const currentChat = window.chats.find(chat => chat.id === window.currentChatId);\n  console.log('Updating current chat name:', currentChat);\n  \n  if (currentChat) {\n    // Safely handle potential null/undefined name\n    const displayName = currentChat.name || 'Unnamed Chat';\n    elements.currentChatName.textContent = displayName;\n    \n    // Add a title attribute for tooltip on hover\n    elements.currentChatName.title = `${displayName} (Click to rename)`;\n    \n    // Make the chat name editable\n    elements.currentChatName.onclick = () => {\n      if (window.currentChatId) {\n        window.showRenameChat(window.currentChatId, elements.currentChatName.textContent);\n      }\n    };\n    \n    // Add a visual indicator that the name is editable\n    elements.currentChatName.classList.add('editable');\n  } else {\n    console.log('No current chat selected');\n    elements.currentChatName.textContent = 'No Chat Selected';\n    elements.currentChatName.title = 'No Chat Selected';\n    elements.currentChatName.onclick = null;\n    elements.currentChatName.classList.remove('editable');\n  }\n}\n\n// Update stats display\nexport function updateStatsDisplay() {\n  // Update the cost in the header\n  updateTotalCostDisplay();\n  \n  // Update the stats in the controls sidebar\n  if (elements.statsMessageCount) {\n    elements.statsMessageCount.textContent = window.totalMessages;\n  }\n  \n  if (elements.statsTokenCount) {\n    elements.statsTokenCount.textContent = `${window.totalInputTokens} in / ${window.totalOutputTokens} out`;\n  }\n  \n  if (elements.statsTotalCost) {\n    elements.statsTotalCost.textContent = `${window.totalCost.toFixed(4)}`;\n  }\n}\n\n// Update the total cost display\nexport function updateTotalCostDisplay() {\n  const costElement = document.querySelector('.cost-value');\n  if (costElement) {\n    costElement.textContent = `${window.totalCost.toFixed(4)}`;\n  }\n}\n\n// Scroll to the bottom of the messages container\nexport function scrollToBottom() {\n  elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;\n}\n\n// Make the chat controls sidebar collapsed by default on desktop\nexport function initializeSidebars() {\n  // On initial load, collapse the controls sidebar on desktop\n  if (window.innerWidth > 768 && elements.chatControlsSidebar) {\n    elements.chatControlsSidebar.classList.add('collapsed');\n    if (elements.expandChatControlsButton) {\n      elements.expandChatControlsButton.classList.add('visible');\n    }\n  }\n}\n\n// Toggle chat sidebar\nexport function toggleChatSidebar() {\n  if (!elements.chatSidebar) return;\n  \n  elements.chatSidebar.classList.toggle('collapsed');\n  \n  if (elements.expandChatSidebarButton) {\n    if (elements.chatSidebar.classList.contains('collapsed')) {\n      elements.expandChatSidebarButton.classList.add('visible');\n    } else {\n      elements.expandChatSidebarButton.classList.remove('visible');\n    }\n  }\n}\n\n// Toggle chat controls sidebar\nexport function toggleChatControlsSidebar() {\n  if (!elements.chatControlsSidebar) return;\n  \n  elements.chatControlsSidebar.classList.toggle('collapsed');\n  \n  if (elements.expandChatControlsButton) {\n    if (elements.chatControlsSidebar.classList.contains('collapsed')) {\n      elements.expandChatControlsButton.classList.add('visible');\n    } else {\n      elements.expandChatControlsButton.classList.remove('visible');\n    }\n  }\n}\n\n// Toggle section\nexport function toggleSection(sectionId) {\n  const section = document.getElementById(sectionId).closest('.section');\n  section.classList.toggle('collapsed');\n}\n\n// Render empty state for messages container\nexport function renderEmptyState() {\n  return `\n    <div class=\"empty-state\">\n      <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n        <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\n      </svg>\n      <p>No messages yet</p>\n      <p class=\"text-sm\">Start a conversation!</p>\n    </div>\n  `;\n}\n", "// Message chain utilities\nimport { messageChain, currentHead } from '../components/app.js';\n\n// Sort the message chain to get messages in chronological order\nexport function sortMessageChain() {\n  console.log('Sorting message chain:', {\n    chainLength: messageChain.length,\n    currentHead: currentHead\n  });\n  \n  // Create a map for fast lookups\n  const messagesById = {};\n  messageChain.forEach(msg => {\n    messagesById[msg.id] = msg;\n  });\n  \n  // Track visited messages to handle potential cycles\n  const visited = new Set();\n  const result = [];\n  const missingParents = new Set();\n  \n  // For topological sort - start with all head nodes (nodes with no parents)\n  // In our DAG traversal, we'll use a recursive DFS approach\n  function processMessage(message, level = 0) {\n    console.log(`Processing message: ${message.id} at level ${level}`);\n    if (visited.has(message.id)) {\n      console.log(`- Already visited ${message.id}, skipping`);\n      return;\n    }\n    visited.add(message.id);\n    \n    // Process parents first (recursively)\n    if (message.parents && message.parents.length > 0) {\n      console.log(`- Message ${message.id} has ${message.parents.length} parents`);\n      for (const parentId of message.parents) {\n        const parent = messagesById[parentId];\n        if (parent) {\n          console.log(`- Processing parent: ${parentId}`);\n          processMessage(parent, level + 1);\n        } else {\n          console.log(`- MISSING PARENT: ${parentId} for message ${message.id}`);\n          missingParents.add(parentId);\n        }\n      }\n    } else {\n      console.log(`- Message ${message.id} has no parents`);\n    }\n    \n    // Add this message to the result\n    result.push(message);\n  }\n  \n  // Find the head message (latest message)\n  if (currentHead && messagesById[currentHead]) {\n    console.log(`Starting traversal from head: ${currentHead}`);\n    processMessage(messagesById[currentHead]);\n  } else {\n    console.log('No current head or head not found in message chain');\n    // Without a clear head, process all messages\n    console.log('Processing all messages as fallback');\n    messageChain.forEach(msg => {\n      if (!visited.has(msg.id)) {\n        processMessage(msg);\n      }\n    });\n  }\n  \n  if (missingParents.size > 0) {\n    console.warn('MISSING PARENTS DETECTED:', Array.from(missingParents));\n  }\n  \n  console.log(`Sorted message chain: ${result.length} messages`);\n  return result;\n}\n", "// Text and content formatting utilities\n\n// Format message content with code highlighting, etc.\nexport function formatMessageContent(content) {\n  if (!content) return '';\n  \n  // Escape HTML\n  let text = content\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#039;\");\n  \n  // Format code blocks\n  text = text.replace(/```([^`]+)```/g, (_, code) => \n    `<pre><code>${code}</code></pre>`\n  );\n  \n  // Format inline code\n  text = text.replace(/`([^`]+)`/g, (_, code) => \n    `<code>${code}</code>`\n  );\n  \n  // Convert newlines to <br>\n  text = text.replace(/\\n/g, '<br>');\n  \n  return text;\n}\n\n// Format JSON data for display\nexport function formatJsonData(data) {\n  try {\n    // Convert the data to a formatted string with 2-space indentation\n    return JSON.stringify(data, null, 2)\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\");\n  } catch (error) {\n    console.error('Error formatting JSON data:', error);\n    return 'Error displaying data';\n  }\n}\n\n// Basic HTML sanitization to prevent XSS\nexport function sanitizeHTML(html) {\n  if (!html) return '';\n\n  // Create a temporary element\n  const tempDiv = document.createElement('div');\n  tempDiv.innerHTML = html;\n\n  // Remove potentially dangerous elements and attributes\n  const dangerous = ['script', 'iframe', 'object', 'embed', 'form'];\n  dangerous.forEach(tag => {\n    const elements = tempDiv.getElementsByTagName(tag);\n    while (elements.length > 0) {\n      elements[0].parentNode.removeChild(elements[0]);\n    }\n  });\n\n  // Remove dangerous attributes from all elements\n  const allElements = tempDiv.getElementsByTagName('*');\n  for (let i = 0; i < allElements.length; i++) {\n    const element = allElements[i];\n    const attrs = element.attributes;\n    for (let j = attrs.length - 1; j >= 0; j--) {\n      const attr = attrs[j];\n      if (attr.name.startsWith('on') || attr.name === 'href' && attr.value.startsWith('javascript:')) {\n        element.removeAttribute(attr.name);\n      }\n    }\n  }\n\n  return tempDiv.innerHTML;\n}\n", "// Model utility functions\nimport { \n  messageChain, models, lastUsedModelId, \n  totalCost, totalInputTokens, totalOutputTokens, totalMessages,\n  setTotalCost, setTotalInputTokens, setTotalOutputTokens, setTotalMessages,\n  setLastUsedModelId\n} from '../components/app.js';\nimport { sortMessageChain } from './message-chain.js';\nimport { updateStatsDisplay } from './ui.js';\n\n// Find the last used model ID by scanning the message chain\nexport function findLastUsedModel() {\n  // Use the sorted message chain to get messages in chronological order\n  const sortedMessages = sortMessageChain();\n  \n  // Find the last assistant message in the chain\n  for (let i = sortedMessages.length - 1; i >= 0; i--) {\n    const message = sortedMessages[i];\n    if (message.data && message.data.Chat && message.data.Chat.Assistant) {\n      const assistantMsg = message.data.Chat.Assistant;\n      let model;\n      \n      // Handle nested structure\n      if (assistantMsg.Claude) {\n        model = assistantMsg.Claude.model;\n      } else if (assistantMsg.Gemini) {\n        model = assistantMsg.Gemini.model;\n      } else if (assistantMsg.OpenRouter) {\n        model = assistantMsg.OpenRouter.model;\n      } else {\n        // Fallback for older structure\n        model = assistantMsg.model;\n      }\n      \n      if (model) {\n        console.log(`Found last used model: ${model}`);\n        setLastUsedModelId(model);\n        return model;\n      }\n    }\n  }\n  \n  // If no assistant message found, return null\n  console.log('No assistant message found in the chain, no lastUsedModelId set');\n  return null;\n}\n\n// Helper to get max tokens for a model based on model data\nexport function getModelMaxTokens(modelId) {\n  // Find the model in our models array\n  const model = models.find(m => m.id === modelId);\n  if (model && model.max_tokens) {\n    return model.max_tokens;\n  }\n  \n  // Fallback values if not in models array\n  \n  // Check for OpenRouter models\n  if (modelId?.includes('/')) {\n    // Check specifically for Llama 4 Maverick free\n    if (modelId === \"meta-llama/llama-4-maverick:free\" || \n        modelId === \"llama-4-maverick:free\" || \n        modelId === \"llama-4-maverick-free\") {\n      return 1000000; // 1 million tokens context window\n    }\n  }\n  \n  switch(modelId) {\n    // Gemini models\n    case \"gemini-2.0-flash\":\n    case \"gemini-2.0-pro\": return 32768;\n        \n    // Claude 3.7 models\n    case \"claude-3-7-sonnet-20250219\": return 8192;\n    \n    // Claude 3.5 models\n    case \"claude-3-5-sonnet-20241022\":\n    case \"claude-3-5-haiku-20241022\":\n    case \"claude-3-5-sonnet-20240620\": return 8192;\n    \n    // Claude 3 models\n    case \"claude-3-opus-20240229\":\n    case \"claude-3-sonnet-20240229\":\n    case \"claude-3-haiku-20240307\": return 4096;\n    \n    // Claude 2 models\n    case \"claude-2.1\":\n    case \"claude-2.0\": return 4096;\n    \n    // Default case\n    default: return 4096; // Conservative default\n  }\n}\n\n// Get pricing for a specific model\nexport function getModelPricing(modelId) {\n  // Check if it's a Gemini model\n  if (modelId?.startsWith(\"gemini-\")) {\n    if (modelId === \"gemini-2.0-flash\") {\n      return { inputCost: 0.35, outputCost: 1.05 };\n    } else if (modelId === \"gemini-2.0-pro\") {\n      return { inputCost: 3.50, outputCost: 10.50 };\n    }\n  }\n  \n  // Check for OpenRouter models\n  if (modelId?.includes('/')) {\n    // Check specifically for Llama 4 Maverick free\n    if (modelId === \"meta-llama/llama-4-maverick:free\" || \n        modelId === \"llama-4-maverick:free\" || \n        modelId === \"llama-4-maverick-free\") {\n      return { inputCost: 0.00, outputCost: 0.00 }; // Free model\n    }\n    \n    // For other OpenRouter models, provide default pricing or unknown\n    // This is a placeholder - real pricing would depend on the specific model\n    return { inputCost: null, outputCost: null };\n  }\n  \n  // Claude model pricing\n  switch(modelId) {\n    // Claude 3.7 models\n    case \"claude-3-7-sonnet-20250219\":\n      return { inputCost: 3.00, outputCost: 15.00 };\n        \n    // Claude 3.5 models\n    case \"claude-3-5-sonnet-20241022\":\n    case \"claude-3-5-sonnet-20240620\":\n      return { inputCost: 3.00, outputCost: 15.00 };\n        \n    case \"claude-3-5-haiku-20241022\":\n      return { inputCost: 0.80, outputCost: 4.00 };\n        \n    // Claude 3 models\n    case \"claude-3-opus-20240229\":\n      return { inputCost: 15.00, outputCost: 75.00 };\n        \n    case \"claude-3-sonnet-20240229\":\n      return { inputCost: 3.00, outputCost: 15.00 };\n        \n    case \"claude-3-haiku-20240307\":\n      return { inputCost: 0.25, outputCost: 1.25 };\n        \n    // Default or unknown model - use null to indicate unknown pricing\n    default:\n      return { inputCost: null, outputCost: null };\n  }\n}\n\n// Calculate the cost of a message\nexport function calculateMessageCost(usage, addToTotal = false, modelId = null) {\n  // If no model ID provided, use the last used model ID\n  modelId = modelId || lastUsedModelId || \"claude-3-7-sonnet-20250219\";\n  \n  // Get pricing for this specific model\n  const pricing = getModelPricing(modelId);\n  \n  // If pricing is unknown for this model, return \"Unknown\"\n  if (pricing.inputCost === null || pricing.outputCost === null) {\n    return \"Unknown\";\n  }\n  \n  // Handle different field names for gemini vs claude\n  const inputTokens = usage.input_tokens || usage.prompt_tokens || 0;\n  const outputTokens = usage.output_tokens || usage.completion_tokens || 0;\n  \n  const inputCost = (inputTokens / 1000000) * pricing.inputCost;\n  const outputCost = (outputTokens / 1000000) * pricing.outputCost;\n  const messageCost = inputCost + outputCost;\n  \n  // Update total cost only when explicitly requested\n  if (addToTotal) {\n    setTotalCost(totalCost + messageCost);\n    setTotalInputTokens(totalInputTokens + inputTokens);\n    setTotalOutputTokens(totalOutputTokens + outputTokens);\n    setTotalMessages(totalMessages + 1);\n    updateStatsDisplay();\n  }\n  \n  // Format to 4 decimal places\n  return messageCost.toFixed(4);\n}\n", "// Typing indicator utilities for chat interface\nimport { elements } from './elements.js';\nimport { scrollToBottom } from './ui.js';\n\n// Add a typing indicator to show the assistant is thinking\nexport function addTypingIndicator() {\n  const typingIndicator = document.createElement('div');\n  typingIndicator.className = 'typing-indicator';\n  typingIndicator.id = 'typingIndicator';\n  typingIndicator.innerHTML = `\n    <div class=\"typing-dots\">\n      <div class=\"typing-dot\"></div>\n      <div class=\"typing-dot\"></div>\n      <div class=\"typing-dot\"></div>\n    </div>\n  `;\n  elements.messagesContainer.appendChild(typingIndicator);\n  scrollToBottom();\n}\n\n// Remove the typing indicator\nexport function removeTypingIndicator() {\n  const indicator = document.getElementById('typingIndicator');\n  if (indicator) {\n    indicator.remove();\n  }\n}\n", "// Chat component handling rendering and interaction\nimport { \n  messageChain, currentHead, currentChatId, chats, \n  setMessageChain, setCurrentHead, setCurrentChatId,\n  setLastUsedModelId, setIsWaitingForResponse\n} from './app.js';\nimport { elements } from '../utils/elements.js';\nimport { sortMessageChain } from '../utils/message-chain.js';\nimport { formatMessageContent } from '../utils/formatters.js';\nimport { renderEmptyState, showError, showSuccess } from '../utils/ui.js';\nimport { getModelMaxTokens } from '../utils/models.js';\nimport { sendWebSocketMessage } from '../services/websocket.js';\nimport { scrollToBottom } from '../utils/ui.js';\n\n// Render messages in the chat container\nexport function renderMessages() {\n  const sortedMessages = sortMessageChain();\n  elements.messagesContainer.innerHTML = sortedMessages.length ? \n    sortedMessages.map(renderMessage).join('') :\n    renderEmptyState();\n  \n  // Enable/disable generate button based on whether we have messages\n  elements.generateButton.disabled = (sortedMessages.length === 0);\n}\n\n// Render a single message\nexport function renderMessage(message) {\n  console.log('Rendering message:', message, 'Message data:', JSON.stringify(message.data, null, 2));\n  if (message.data.Chat) {\n    const msg = message.data.Chat;\n    // Handle the new Message enum structure\n    if (msg.User) {\n      // Determine if this is a short message (less than 80 characters)\n      const isShortMessage = msg.User.content.length < 80;\n      const smallClass = isShortMessage ? 'small' : '';\n      \n      return `\n        <div class=\"message user ${smallClass}\" data-message-id=\"${message.id}\">\n          ${formatMessageContent(msg.User.content)}\n          <div class=\"message-actions\">\n            <button class=\"message-action-button\" onclick=\"window.copyMessageText('${message.id}')\">\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n                <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n              </svg>\n              <span>Copy Text</span>\n            </button>\n            <div class=\"action-divider\"></div>\n            <button class=\"message-action-button\" onclick=\"window.copyMessageId('${message.id}')\">\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path>\n                <path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path>\n              </svg>\n              <span>Copy ID</span>\n            </button>\n          </div>\n        </div>\n      `;\n    } else if (msg.Assistant) {\n      const assistantMsg = msg.Assistant;\n      let content, model, usage, stopReason, providerName, costDisplay;\n      \n      // Handle the nested structure (Claude, Gemini, or OpenRouter)\n      if (assistantMsg.Claude) {\n        const claude = assistantMsg.Claude;\n        content = claude.content;\n        model = claude.model;\n        usage = claude.usage;\n        stopReason = claude.stop_reason;\n        providerName = \"Claude\";\n        \n        // Calculate cost for Claude\n        if (claude.input_cost_per_million_tokens !== null && claude.output_cost_per_million_tokens !== null) {\n          const inputCost = (claude.usage.input_tokens / 1000000) * claude.input_cost_per_million_tokens;\n          const outputCost = (claude.usage.output_tokens / 1000000) * claude.output_cost_per_million_tokens;\n          costDisplay = (inputCost + outputCost).toFixed(4);\n        } else {\n          costDisplay = \"Unknown\";\n        }\n      } else if (assistantMsg.Gemini) {\n        const gemini = assistantMsg.Gemini;\n        content = gemini.content;\n        model = gemini.model;\n        usage = gemini.usage;\n        stopReason = gemini.finish_reason;\n        providerName = \"Gemini\";\n        \n        // Calculate cost for Gemini\n        if (gemini.input_cost_per_million_tokens !== null && gemini.output_cost_per_million_tokens !== null) {\n          const inputCost = (gemini.usage.prompt_tokens / 1000000) * gemini.input_cost_per_million_tokens;\n          const outputCost = (gemini.usage.completion_tokens / 1000000) * gemini.output_cost_per_million_tokens;\n          costDisplay = (inputCost + outputCost).toFixed(4);\n        } else {\n          costDisplay = \"Unknown\";\n        }\n      } else if (assistantMsg.OpenRouter) {\n        // Handle OpenRouter messages\n        const openrouter = assistantMsg.OpenRouter;\n        content = openrouter.content;\n        model = openrouter.model;\n        usage = openrouter.usage;\n        stopReason = openrouter.finish_reason;\n        providerName = \"OpenRouter\";\n        \n        // Calculate cost for OpenRouter\n        if (openrouter.input_cost_per_million_tokens !== null && openrouter.output_cost_per_million_tokens !== null) {\n          const inputCost = (openrouter.usage.prompt_tokens / 1000000) * openrouter.input_cost_per_million_tokens;\n          const outputCost = (openrouter.usage.completion_tokens / 1000000) * openrouter.output_cost_per_million_tokens;\n          costDisplay = (inputCost + outputCost).toFixed(4);\n        } else if (openrouter.usage.cost !== null) {\n          costDisplay = openrouter.usage.cost.toFixed(4);\n        } else {\n          costDisplay = \"Unknown\";\n        }\n      } else {\n        // Fallback for older message structure\n        content = assistantMsg.content || \"Content unavailable\";\n        model = assistantMsg.model || \"Unknown model\";\n        usage = assistantMsg.usage || { input_tokens: 0, output_tokens: 0 };\n        stopReason = assistantMsg.stop_reason || assistantMsg.finish_reason || \"Unknown\";\n        providerName = model?.startsWith(\"gemini-\") ? \"Gemini\" : \"Claude\";\n        costDisplay = \"Unknown\";\n      }\n      \n      // Determine if this is a short message (less than 100 characters)\n      const isShortMessage = content?.length < 100;\n      const smallClass = isShortMessage ? 'small' : '';\n      \n      return `\n        <div class=\"message assistant ${smallClass}\" data-message-id=\"${message.id}\">\n          ${formatMessageContent(content)}\n          <div class=\"message-actions\">\n            <button class=\"message-action-button\" onclick=\"window.copyMessageText('${message.id}')\">\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n                <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n              </svg>\n              <span>Copy Text</span>\n            </button>\n            <div class=\"action-divider\"></div>\n            <button class=\"message-action-button\" onclick=\"window.copyMessageId('${message.id}')\">\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path>\n                <path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path>\n              </svg>\n              <span>Copy ID</span>\n            </button>\n          </div>\n          <div class=\"message-metadata\">\n            <div class=\"metadata-item\">\n              <span class=\"metadata-label\">Provider:</span> ${providerName}\n            </div>\n            <div class=\"metadata-item\">\n              <span class=\"metadata-label\">Model:</span> ${model}\n            </div>\n            <div class=\"metadata-item\">\n              <span class=\"metadata-label\">Tokens:</span> ${usage ? (usage.input_tokens || usage.prompt_tokens || 0) : 0} in / ${usage ? (usage.output_tokens || usage.completion_tokens || 0) : 0} out of ${getModelMaxTokens(model)}\n            </div>\n            <div class=\"metadata-item\">\n              <span class=\"metadata-label\">Cost:</span> ${costDisplay}\n            </div>\n            <div class=\"metadata-item\">\n              <span class=\"metadata-label\">Stop Reason:</span> ${stopReason}\n            </div>\n          </div>\n        </div>\n      `;\n    }\n  } \n  return '';\n}\n\n// Render the chat list in the sidebar\nexport function renderChatList() {\n  // Sort chats by updated_at (newest first) if available, or fallback to sorting by ID\n  const sortedChats = [...chats].sort((a, b) => {\n    if (a.updated_at && b.updated_at) {\n      return b.updated_at - a.updated_at;\n    }\n    return a.id.localeCompare(b.id);\n  });\n  \n  elements.chatList.innerHTML = sortedChats.length ?\n    sortedChats.map(chat => `\n      <div class=\"chat-item ${chat.id === currentChatId ? 'active' : ''}\" data-chat-id=\"${chat.id}\">\n        <div class=\"chat-item-name\" onclick=\"window.switchChat('${chat.id}')\">${chat.name}</div>\n        <div class=\"chat-item-actions\">\n          <button class=\"chat-action rename\" onclick=\"window.showRenameChat('${chat.id}', '${chat.name}')\">\n            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z\"></path>\n            </svg>\n          </button>\n          <button class=\"chat-action delete\" onclick=\"window.confirmDeleteChat('${chat.id}')\">\n            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M3 6h18\"></path>\n              <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n    `).join('') :\n    '<div class=\"empty-state\">No chats available</div>';\n}\n\n// Create a new chat\nexport function createNewChat(wsConnection) {\n  const chatName = prompt('Enter a name for the new chat:', 'New Chat');\n  if (chatName === null) return; // User cancelled\n  \n  // Validate the chat name\n  if (!chatName.trim()) {\n    showError('Chat name cannot be empty');\n    return;\n  }\n  \n  if (chatName.length > 50) {\n    showError('Chat name too long (maximum 50 characters)');\n    return;\n  }\n  \n  const trimmedName = chatName.trim();\n  console.log(`Creating new chat with name: \"${trimmedName}\"`);\n  \n  // Show loading state\n  elements.loadingOverlay.classList.add('visible');\n  \n  // Add a temporary entry to the chats array while we wait for server response\n  const tempId = 'temp-' + Date.now();\n  const tempChat = {\n    id: tempId,\n    name: trimmedName,\n    isTemporary: true\n  };\n  \n  // Add to chats array and render with loading state\n  const updatedChats = [...chats, tempChat];\n  import('./app.js').then(({ setChats }) => {\n    setChats(updatedChats);\n  });\n  renderChatList();\n  \n  // Highlight the temporary chat\n  const tempChatElement = document.querySelector(`.chat-item[data-chat-id=\"${tempId}\"] .chat-item-name`);\n  if (tempChatElement) {\n    tempChatElement.innerHTML += ' <span class=\"loading-text\">(Creating...)</span>';\n  }\n  \n  sendWebSocketMessage({\n    type: 'create_chat',\n    name: trimmedName,\n    starting_head: null // No starting head for a fresh chat\n  }, wsConnection);\n  \n  // Reset message chain for new chat\n  import('./app.js').then(({ setMessageChain, setCurrentHead }) => {\n    setMessageChain([]);\n    setCurrentHead(null);\n  });\n  \n  // Clear the messages display immediately\n  elements.messagesContainer.innerHTML = renderEmptyState();\n  \n  // Update the head ID display\n  elements.headId.textContent = '';\n  \n  // Disable generate button for the new empty chat\n  elements.generateButton.disabled = true;\n  \n  // If no server response after 5 seconds, remove temporary chat and show error\n  setTimeout(() => {\n    // Check if temporary chat still exists (server didn't respond)\n    const tempChatStillExists = chats.some(c => c.id === tempId);\n    if (tempChatStillExists) {\n      // Remove temporary chat from array\n      const updatedChats = chats.filter(c => c.id !== tempId);\n      import('./app.js').then(({ setChats }) => {\n        setChats(updatedChats);\n      });\n      renderChatList();\n      showError('Failed to create chat. Server did not respond.');\n    }\n    elements.loadingOverlay.classList.remove('visible');\n  }, 5000);\n}\n\n// Branch from the current chat to create a new one\nexport function branchChat(wsConnection) {\n  if (!currentHead) {\n    showError('Cannot branch from an empty chat');\n    return;\n  }\n  \n  const chatName = prompt('Enter a name for the branched chat:', 'Branch of current chat');\n  if (chatName === null) return; // User cancelled\n  \n  sendWebSocketMessage({\n    type: 'create_chat',\n    name: chatName,\n    starting_head: currentHead // Start from current head\n  }, wsConnection);\n  \n  // Message chain will be loaded when the server notifies us of the new chat\n}\n\n// Switch to a different chat\nexport function switchChat(chatId, wsConnection) {\n  if (chatId === currentChatId) return; // Already on this chat\n  \n  // Reset pending child messages when switching chats\n  \n  sendWebSocketMessage({\n    type: 'switch_chat',\n    chat_id: chatId\n  }, wsConnection);\n  \n  // Reset message chain - will be reloaded from server\n  import('./app.js').then(({ setMessageChain, setCurrentHead, setLastUsedModelId }) => {\n    setMessageChain([]);\n    setCurrentHead(null);\n    setLastUsedModelId(null);\n  });\n  \n  // Clear the messages display immediately\n  elements.messagesContainer.innerHTML = renderEmptyState();\n  \n  // Update the head ID display\n  elements.headId.textContent = '';\n  \n  // Disable generate button until messages are loaded\n  elements.generateButton.disabled = true;\n}\n\n// Show prompt to rename a chat\nexport function showRenameChat(chatId, currentName) {\n  // Decode HTML entities in the current name for the prompt\n  const decodedCurrentName = currentName.replace(/&amp;/g, '&')\n                                       .replace(/&lt;/g, '<')\n                                       .replace(/&gt;/g, '>')\n                                       .replace(/&quot;/g, '\"');\n  \n  const newName = prompt('Enter a new name for the chat:', decodedCurrentName);\n  if (newName === null || newName === decodedCurrentName) return; // User cancelled or unchanged\n  \n  // Validate the new name (e.g., not empty, not too long)\n  if (!newName.trim()) {\n    showError('Chat name cannot be empty');\n    return;\n  }\n  \n  if (newName.length > 50) {\n    showError('Chat name too long (maximum 50 characters)');\n    return;\n  }\n  \n  console.log(`Renaming chat ${chatId} from \"${currentName}\" to \"${newName.trim()}\"`); // Trim the name\n  \n  // Show visual feedback that rename is in progress\n  const chatElement = document.querySelector(`.chat-item[data-chat-id=\"${chatId}\"] .chat-item-name`);\n  if (chatElement) {\n    const originalText = chatElement.textContent;\n    chatElement.textContent = 'Renaming...';\n    \n    // Restore original text after a delay if the rename operation takes too long\n    setTimeout(() => {\n      if (chatElement.textContent === 'Renaming...') {\n        chatElement.textContent = originalText;\n      }\n    }, 3000);\n  }\n  \n  sendWebSocketMessage({\n    type: 'rename_chat',\n    chat_id: chatId,\n    name: newName.trim() // Ensure we trim the name\n  }, window.ws);\n}\n\n// Confirm and delete a chat\nexport function confirmDeleteChat(chatId) {\n  // Find the chat to display its name\n  const chat = chats.find(c => c.id === chatId);\n  const chatName = chat ? chat.name : 'this chat';\n  \n  const confirmed = confirm(`Are you sure you want to delete \"${chatName}\"?\\n\\nThis action cannot be undone.`);\n  if (!confirmed) return;\n  \n  sendWebSocketMessage({\n    type: 'delete_chat',\n    chat_id: chatId\n  }, window.ws);\n}\n\n// Send a user message\nexport function sendMessage(wsConnection) {\n  const content = elements.messageInput.value.trim();\n  \n  if (!content || !wsConnection || wsConnection.readyState !== WebSocket.OPEN || window.isWaitingForResponse) {\n    return;\n  }\n  \n  console.log('Sending user message:', {\n    messageLength: content.length,\n    messageChainLength: messageChain.length,\n    currentHead: currentHead,\n  });\n  \n  // Create temporary message object for optimistic rendering\n  const tempMessage = {\n    id: 'temp-' + Date.now(),\n    data: {\n      Chat: {\n        User: {\n          content: content\n        }\n      }\n    }\n  };\n  \n  // Add to message chain and render immediately\n  const updatedMessageChain = [...messageChain, tempMessage];\n  import('./app.js').then(({ setMessageChain }) => {\n    setMessageChain(updatedMessageChain);\n  });\n  console.log('Added temporary message to chain, new length:', updatedMessageChain.length);\n  renderMessages();\n  scrollToBottom();\n  \n  // Set waiting state\n  elements.messageInput.value = '';\n  elements.messageInput.style.height = 'auto';\n  elements.messageInput.focus();\n  elements.sendButton.disabled = true;\n  \n  // Enable the generate button now that we have a message\n  elements.generateButton.disabled = false;\n  \n  // Send the actual message\n  console.log('Sending WebSocket message with user content');\n  sendWebSocketMessage({\n    type: 'send_message',\n    content: content\n  }, wsConnection);\n}\n\n// Generate an AI response\nexport function generateLlmResponse(wsConnection, modelId) {\n  if (!wsConnection || wsConnection.readyState !== WebSocket.OPEN || window.isWaitingForResponse) {\n    return;\n  }\n  \n  // Get the selected model from the controls sidebar if not provided\n  if (!modelId) {\n    modelId = elements.controlsModelSelector?.value;\n  }\n  \n  // Store this as the most recently used model\n  if (modelId) {\n    import('./app.js').then(({ setLastUsedModelId }) => {\n      setLastUsedModelId(modelId);\n      console.log(`Set lastUsedModelId to: ${modelId}`);\n    });\n  }\n  \n  console.log('Generating LLM response:', {\n    model: modelId,\n    messageChainLength: messageChain.length,\n    currentHead: currentHead,\n    sortedChainLength: sortMessageChain().length\n  });\n  \n  // Set waiting state\n  import('./app.js').then(({ setIsWaitingForResponse }) => {\n    setIsWaitingForResponse(true);\n  });\n  elements.sendButton.disabled = true;\n  elements.generateButton.disabled = true;\n  \n  // Add typing indicator\n  import('../utils/typing-indicator.js').then(({ addTypingIndicator }) => {\n    addTypingIndicator();\n    scrollToBottom();\n  });\n  \n  // Send the generate request with model ID\n  console.log('Sending WebSocket message to generate LLM response');\n  sendWebSocketMessage({\n    type: 'generate_llm_response',\n    model_id: modelId\n  }, wsConnection);\n}\n", "// Model selector component for selecting AI models\nimport { models, lastUsedModelId } from './app.js';\nimport { elements } from '../utils/elements.js';\nimport { getModelMaxTokens, getModelPricing } from '../utils/models.js';\n\n// Populate the model selector dropdown\nexport function populateModelSelector() {\n  if (!elements.controlsModelSelector || !models || models.length === 0) return;\n  \n  // Save the currently selected model if any\n  const currentSelection = elements.controlsModelSelector.value;\n  \n  // Group models by provider\n  const claudeModels = models.filter(m => !m.provider || m.provider === 'claude');\n  const geminiModels = models.filter(m => m.provider === 'gemini');\n  const openrouterModels = models.filter(m => m.provider === 'openrouter');\n  \n  // Sort Claude models with the most recent first\n  const sortedClaudeModels = [...claudeModels].sort((a, b) => {\n    // Special case: always put 3.7 Sonnet at the top\n    if (a.id === 'claude-3-7-sonnet-20250219') return -1;\n    if (b.id === 'claude-3-7-sonnet-20250219') return 1;\n    return b.id.localeCompare(a.id);\n  });\n  \n  // Clear current options\n  elements.controlsModelSelector.innerHTML = '';\n  \n  // Create Claude group\n  const claudeGroup = document.createElement('optgroup');\n  claudeGroup.label = 'Claude Models';\n  \n  // Add Claude options\n  sortedClaudeModels.forEach(model => {\n    const option = document.createElement('option');\n    option.value = model.id;\n    option.textContent = model.display_name;\n    claudeGroup.appendChild(option);\n  });\n  \n  // Create Gemini group\n  const geminiGroup = document.createElement('optgroup');\n  geminiGroup.label = 'Gemini Models';\n  \n  // Add Gemini options\n  geminiModels.forEach(model => {\n    const option = document.createElement('option');\n    option.value = model.id;\n    option.textContent = model.display_name;\n    geminiGroup.appendChild(option);\n  });\n  \n  // Create OpenRouter group\n  const openrouterGroup = document.createElement('optgroup');\n  openrouterGroup.label = 'OpenRouter Models';\n  \n  // Add OpenRouter options\n  openrouterModels.forEach(model => {\n    const option = document.createElement('option');\n    option.value = model.id;\n    option.textContent = model.display_name;\n    openrouterGroup.appendChild(option);\n  });\n  \n  // Add groups to selector\n  elements.controlsModelSelector.appendChild(claudeGroup);\n  elements.controlsModelSelector.appendChild(geminiGroup);\n  elements.controlsModelSelector.appendChild(openrouterGroup);\n  \n  // Prioritize using the last used model if available\n  if (lastUsedModelId && models.some(m => m.id === lastUsedModelId)) {\n    elements.controlsModelSelector.value = lastUsedModelId;\n    console.log(`Set model selector to last used model: ${lastUsedModelId}`);\n  } \n  // Otherwise restore previous selection if possible\n  else if (currentSelection && models.some(m => m.id === currentSelection)) {\n    elements.controlsModelSelector.value = currentSelection;\n    console.log(`Restored previous selection: ${currentSelection}`);\n  } \n  // Default to the first option if nothing else works\n  else if (models.length > 0) {\n    elements.controlsModelSelector.value = models[0].id;\n    console.log(`Defaulted to first model: ${models[0].id}`);\n  }\n  \n  // Update model context window info\n  updateModelInfo();\n}\n\n// Update the selected model in the UI\nexport function updateModelSelector() {\n  // Check if we have a model to select and the model selector exists\n  if (!lastUsedModelId || !elements.controlsModelSelector) return;\n  \n  // Check if the model is available in the models list\n  if (models.some(model => model.id === lastUsedModelId)) {\n    console.log(`Setting model selector to last used model: ${lastUsedModelId}`);\n    elements.controlsModelSelector.value = lastUsedModelId;\n    // Update model info display\n    updateModelInfo();\n  } else {\n    console.log(`Last used model ${lastUsedModelId} not found in available models`);\n  }\n}\n\n// Update the model info display in the controls sidebar\nexport function updateModelInfo() {\n  if (!elements.controlsModelSelector || !elements.modelContextWindow) return;\n  \n  const selectedModelId = elements.controlsModelSelector.value;\n  const maxTokens = getModelMaxTokens(selectedModelId);\n  const modelInfo = document.getElementById('modelInfo');\n  \n  // Format with commas\n  elements.modelContextWindow.textContent = new Intl.NumberFormat().format(maxTokens) + ' tokens';\n  \n  // Update cost information based on the model\n  const costInfoElem = modelInfo.querySelector('.info-value:not(#modelContextWindow)');\n  if (costInfoElem) {\n    // Get model pricing\n    const pricing = getModelPricing(selectedModelId);\n    \n    // Update cost display\n    if (pricing.inputCost === null || pricing.outputCost === null) {\n      costInfoElem.textContent = 'Cost information unavailable';\n    } else if (pricing.inputCost === 0 && pricing.outputCost === 0) {\n      costInfoElem.textContent = 'Free';\n    } else {\n      costInfoElem.textContent = '$' +\n       + pricing.inputCost.toFixed(2) + ' / '\n       + pricing.outputCost.toFixed(2) + ' per 1M tokens (in/out)';\n    }\n  }\n}\n", "// Message component for handling individual messages\nimport { \n  messageChain, totalCost, totalInputTokens, totalOutputTokens, totalMessages,\n  setMessageChain, setTotalCost, setTotalInputTokens, setTotalOutputTokens, \n  setTotalMessages, setLastUsedModelId, setIsWaitingForResponse\n} from './app.js';\nimport { elements } from '../utils/elements.js';\nimport { requestMessage } from '../services/websocket.js';\nimport { renderMessages } from './chat.js';\nimport { updateStatsDisplay } from '../utils/ui.js';\nimport { scrollToBottom } from '../utils/ui.js';\nimport { removeTypingIndicator } from '../utils/typing-indicator.js';\n\n// Handle a new message from the server\nexport function handleNewMessage(message, wsConnection) {\n  console.log('Handling new message:', message);\n  console.log('Message chain before handling:', {\n    length: messageChain.length,\n    ids: messageChain.map(m => m.id),\n    currentHead: window.currentHead\n  });\n  \n  // Remove temporary message if it exists\n  const tempMessagesCount = messageChain.filter(m => m.id.startsWith('temp-')).length;\n  const filteredMessageChain = messageChain.filter(m => !m.id.startsWith('temp-'));\n  setMessageChain(filteredMessageChain);\n  console.log(`Removed ${tempMessagesCount} temporary messages`);\n  \n  // Add to message chain if not already present\n  if (!messageChain.find(m => m.id === message.id)) {\n    console.log(`Adding new message to chain: ${message.id}, parents: ${JSON.stringify(message.parents || [])}`);\n    // Add the cost to the total only when a new message is received\n    if (message.data && message.data.Chat && message.data.Chat.Assistant) {\n      const assistantMsg = message.data.Chat.Assistant;\n      \n      // Handle the new nested structure (Claude, Gemini, or OpenRouter)\n      if (assistantMsg.Claude) {\n        const claude = assistantMsg.Claude;\n        // Calculate cost based on model-specific pricing if available\n        if (claude.input_cost_per_million_tokens !== undefined && \n            claude.output_cost_per_million_tokens !== undefined) {\n          \n          if (claude.input_cost_per_million_tokens !== null && \n              claude.output_cost_per_million_tokens !== null) {\n              \n              const inputCost = (claude.usage.input_tokens / 1000000) * claude.input_cost_per_million_tokens;\n              const outputCost = (claude.usage.output_tokens / 1000000) * claude.output_cost_per_million_tokens;\n              \n              setTotalCost(totalCost + (inputCost + outputCost));\n              setTotalInputTokens(totalInputTokens + claude.usage.input_tokens);\n              setTotalOutputTokens(totalOutputTokens + claude.usage.output_tokens);\n              setTotalMessages(totalMessages + 1);\n              updateStatsDisplay();\n          }\n        } else {\n          // Fallback to calculateMessageCost function\n          import('../utils/models.js').then(({ calculateMessageCost }) => {\n            calculateMessageCost(claude.usage, true, claude.model);\n          });\n        }\n        \n        // Store the model ID from the last assistant message\n        setLastUsedModelId(claude.model);\n        console.log(`Stored last used model ID: ${claude.model}`);\n      } else if (assistantMsg.Gemini) {\n        const gemini = assistantMsg.Gemini;\n        // Calculate cost based on model-specific pricing if available\n        if (gemini.input_cost_per_million_tokens !== undefined && \n            gemini.output_cost_per_million_tokens !== undefined) {\n              \n            if (gemini.input_cost_per_million_tokens !== null && \n                gemini.output_cost_per_million_tokens !== null) {\n                \n                const inputCost = (gemini.usage.prompt_tokens / 1000000) * gemini.input_cost_per_million_tokens;\n                const outputCost = (gemini.usage.completion_tokens / 1000000) * gemini.output_cost_per_million_tokens;\n                \n                setTotalCost(totalCost + (inputCost + outputCost));\n                setTotalInputTokens(totalInputTokens + gemini.usage.prompt_tokens);\n                setTotalOutputTokens(totalOutputTokens + gemini.usage.completion_tokens);\n                setTotalMessages(totalMessages + 1);\n                updateStatsDisplay();\n            }\n        } else {\n          // Fallback to calculateMessageCost function\n          import('../utils/models.js').then(({ calculateMessageCost }) => {\n            calculateMessageCost(gemini.usage, true, gemini.model);\n          });\n        }\n        \n        // Store the model ID from the last assistant message\n        setLastUsedModelId(gemini.model);\n        console.log(`Stored last used model ID: ${gemini.model}`);\n      } else if (assistantMsg.OpenRouter) {\n        const openrouter = assistantMsg.OpenRouter;\n        // Calculate cost based on model-specific pricing if available\n        if (openrouter.input_cost_per_million_tokens !== undefined && \n            openrouter.output_cost_per_million_tokens !== undefined) {\n              \n            if (openrouter.input_cost_per_million_tokens !== null && \n                openrouter.output_cost_per_million_tokens !== null) {\n                \n                const inputCost = (openrouter.usage.prompt_tokens / 1000000) * openrouter.input_cost_per_million_tokens;\n                const outputCost = (openrouter.usage.completion_tokens / 1000000) * openrouter.output_cost_per_million_tokens;\n                \n                setTotalCost(totalCost + (inputCost + outputCost));\n                setTotalInputTokens(totalInputTokens + openrouter.usage.prompt_tokens);\n                setTotalOutputTokens(totalOutputTokens + openrouter.usage.completion_tokens);\n                setTotalMessages(totalMessages + 1);\n                updateStatsDisplay();\n            } else if (openrouter.usage.cost !== null) {\n                setTotalCost(totalCost + openrouter.usage.cost);\n                setTotalInputTokens(totalInputTokens + (openrouter.usage.prompt_tokens || 0));\n                setTotalOutputTokens(totalOutputTokens + (openrouter.usage.completion_tokens || 0));\n                setTotalMessages(totalMessages + 1);\n                updateStatsDisplay();\n            }\n        } else {\n          // Fallback to calculateMessageCost function\n          import('../utils/models.js').then(({ calculateMessageCost }) => {\n            calculateMessageCost(openrouter.usage, true, openrouter.model);\n          });\n        }\n        \n        // Store the model ID from the last assistant message\n        setLastUsedModelId(openrouter.model);\n        console.log(`Stored last used model ID: ${openrouter.model}`);\n      }\n      \n      // Update the selected model in the UI if it exists\n      import('./model-selector.js').then(({ updateModelSelector }) => {\n        updateModelSelector();\n      });\n    }\n    \n    // Add the message to the chain\n    setMessageChain([...messageChain, message]);\n  } else {\n    console.log(`Message ${message.id} already exists in chain, skipping`);\n  }\n\n  // Request parent messages if needed\n  if (message.parents && message.parents.length > 0) {\n    console.log(`Message has ${message.parents.length} parents: ${JSON.stringify(message.parents)}`);\n    for (const parentId of message.parents) {\n      if (!messageChain.find(m => m.id === parentId)) {\n        console.log(`Requesting missing parent: ${parentId}`);\n        requestMessage(parentId, wsConnection);\n      } else {\n        console.log(`Parent already in chain: ${parentId}`);\n      }\n    }\n  } else {\n    console.log('Message has no parents');\n  }\n\n  // Reset waiting state and remove typing indicator\n  setIsWaitingForResponse(false);\n  removeTypingIndicator();\n  elements.sendButton.disabled = !elements.messageInput.value.trim();\n  \n  // Enable generate button if we have messages\n  elements.generateButton.disabled = (messageChain.length === 0);\n\n  renderMessages();\n  scrollToBottom();\n}\n", "// Message handling service for WebSocket messages\nimport { \n  messageChain, currentHead, currentChatId, chats, models,\n  lastUsedModelId, isWaitingForResponse, \n  setCurrentHead, setCurrentChatId, setChats, setModels,\n  setLastUsedModelId\n} from '../components/app.js';\nimport { elements } from '../utils/elements.js';\nimport { showError, showSuccess, updateCurrentChatName } from '../utils/ui.js';\nimport { renderChatList, renderMessages } from '../components/chat.js';\nimport { updateModelSelector, populateModelSelector, updateModelInfo } from '../components/model-selector.js';\nimport { findLastUsedModel } from '../utils/models.js';\nimport { requestMessage } from './websocket.js';\nimport { handleNewMessage } from '../components/message.js';\nimport { removeTypingIndicator } from '../utils/typing-indicator.js';\nimport { scrollToBottom } from '../utils/ui.js';\n\n// Handle incoming WebSocket messages\nexport function handleWebSocketMessage(data, wsConnection) {\n  console.log('Processing message:', data);\n\n  switch (data.type) {\n    case 'messages_updated':\n    case 'head':\n      handleHeadUpdate(data, wsConnection);\n      break;\n\n    case 'message':\n      if (data.message) {\n        handleNewMessage(data.message, wsConnection);\n      }\n      break;\n      \n    case 'chats_update':\n      handleChatsUpdate(data);\n      break;\n      \n    case 'chat_created':\n      handleChatCreated(data);\n      break;\n      \n    case 'chat_renamed':\n      handleChatRenamed(data);\n      break;\n      \n    case 'chat_deleted':\n      handleChatDeleted(data);\n      break;\n      \n    case 'models_list':\n      handleModelsList(data);\n      break;\n      \n    case 'error':\n      handleError(data);\n      break;\n  }\n}\n\n// Handle head update messages\nfunction handleHeadUpdate(data, wsConnection) {\n  if (data.current_chat_id && data.current_chat_id !== window.currentChatId) {\n    setCurrentChatId(data.current_chat_id);\n    updateCurrentChatName();\n    renderChatList();\n  }\n  \n  if (data.head) {\n    // Check if head has changed\n    if (data.head !== window.currentHead) {\n      console.log(`Head updated: ${window.currentHead} -> ${data.head}`);\n      setCurrentHead(data.head);\n      elements.headId.textContent = `Head: ${data.head.substring(0, 8)}...`;\n      requestMessage(data.head, wsConnection);\n      \n      // After getting the new head, find the last used model\n      findLastUsedModel();\n      \n      // Enable generate button if we have messages\n      elements.generateButton.disabled = false;\n    }\n  }\n}\n\n// Handle chats update\nfunction handleChatsUpdate(data) {\n  if (data.chats) {\n    setChats(data.chats);\n    if (data.current_chat_id) {\n      setCurrentChatId(data.current_chat_id);\n    }\n    renderChatList();\n    updateCurrentChatName();\n  }\n}\n\n// Handle chat created event\nfunction handleChatCreated(data) {\n  if (data.chat) {\n    console.log('Received chat_created event:', data.chat);\n    \n    // Remove any temporary chats first\n    const updatedChats = window.chats.filter(c => !c.isTemporary);\n    \n    // Add to chats array if not already present\n    if (!updatedChats.find(c => c.id === data.chat.id)) {\n      updatedChats.push(data.chat);\n      console.log(`Added new chat to chats array: ${data.chat.id} - ${data.chat.name}`);\n    } else {\n      console.log(`Chat already exists in array, updating: ${data.chat.id}`);\n      // Update existing chat with new data\n      const index = updatedChats.findIndex(c => c.id === data.chat.id);\n      if (index !== -1) {\n        updatedChats[index] = { \n          ...updatedChats[index], \n          ...data.chat,\n          name: data.chat.name || updatedChats[index].name, // Ensure name is preserved\n          icon: data.chat.icon !== undefined ? data.chat.icon : updatedChats[index].icon\n        };\n      }\n    }\n    \n    // Update chats array\n    setChats(updatedChats);\n    \n    // Update current chat ID\n    setCurrentChatId(data.chat.id);\n    \n    // Ensure the message display is cleared for the new chat\n    if (window.messageChain.length > 0) {\n      import('../components/app.js').then(({ resetState }) => {\n        resetState();\n        elements.messagesContainer.innerHTML = renderEmptyState();\n        elements.headId.textContent = '';\n        elements.generateButton.disabled = true;\n      });\n    }\n    \n    // Hide loading overlay\n    elements.loadingOverlay.classList.remove('visible');\n    \n    renderChatList();\n    updateCurrentChatName();\n    \n    // Show success notification\n    showSuccess(`Chat \"${data.chat.name}\" created successfully`);\n  } else {\n    console.error('Received chat_created event without chat data');\n    showError('Error creating chat: Invalid response from server');\n  }\n}\n\n// Handle chat renamed event\nfunction handleChatRenamed(data) {\n  if (data.chat) {\n    console.log('Received chat_renamed event:', data.chat);\n    // Update chat in the array\n    const updatedChats = [...window.chats];\n    const index = updatedChats.findIndex(c => c.id === data.chat.id);\n    if (index !== -1) {\n      // Store the old name for logging\n      const oldName = updatedChats[index].name;\n      \n      // Properly preserve all existing properties while updating only what changed\n      updatedChats[index] = { \n        ...updatedChats[index], \n        name: data.chat.name || updatedChats[index].name,\n        icon: data.chat.icon !== undefined ? data.chat.icon : updatedChats[index].icon\n      };\n      console.log(`Updated chat in array: ${updatedChats[index].id} renamed from \"${oldName}\" to \"${updatedChats[index].name}\"`);\n      \n      // Update chats array\n      setChats(updatedChats);\n      \n      renderChatList();\n      updateCurrentChatName();\n      \n      // Show success notification\n      showSuccess(`Chat renamed to \"${updatedChats[index].name}\" successfully`);\n    } else {\n      console.warn('Received rename event for non-existent chat ID:', data.chat.id);\n      showError('Error: Chat not found');\n    }\n  } else {\n    console.error('Received chat_renamed event without chat data');\n    showError('Error renaming chat: Invalid response from server');\n  }\n}\n\n// Handle chat deleted event\nfunction handleChatDeleted(data) {\n  if (data.chat_id) {\n    // Remove chat from array\n    const updatedChats = window.chats.filter(c => c.id !== data.chat_id);\n    setChats(updatedChats);\n    renderChatList();\n    updateCurrentChatName();\n  }\n}\n\n// Handle models list\nfunction handleModelsList(data) {\n  if (data.models) {\n    setModels(data.models);\n    populateModelSelector();\n    // Update the model info in the sidebar\n    updateModelInfo();\n  }\n}\n\n// Handle error messages\nfunction handleError(data) {\n  console.error('Error from server:', data);\n  // Check if this is a chat operation error and provide more context\n  if (data.error_code === 'rename_chat_failed') {\n    showError(data.message || 'Failed to rename chat');\n  } else if (data.error_code === 'create_chat_failed') {\n    showError(data.message || 'Failed to create chat');\n  } else {\n    showError(data.message || 'An error occurred');\n  }\n  \n  // Hide loading overlay if it's visible\n  elements.loadingOverlay.classList.remove('visible');\n}\n\n// Helper function to get render empty state\nfunction renderEmptyState() {\n  return `\n    <div class=\"empty-state\">\n      <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n        <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\n      </svg>\n      <p>No messages yet</p>\n      <p class=\"text-sm\">Start a conversation!</p>\n    </div>\n  `;\n}\n", "// WebSocket service for communication with the server\nimport { reconnectAttempts, MAX_RECONNECT_ATTEMPTS, RECONNECT_DELAY, setReconnectAttempts } from '../components/app.js';\nimport { elements } from '../utils/elements.js';\nimport { updateConnectionStatus, showError } from '../utils/ui.js';\nimport { handleWebSocketMessage } from './message-handler.js';\n\n// Initialize the websocket connection\nexport function connectWebSocket() {\n  console.log('Connecting to WebSocket...');\n  updateConnectionStatus('connecting');\n  \n  // Create a new WebSocket connection\n  // Try to get WebSocket port from the current URL or use a fallback value\n  let wsPort = 8084; // Default fallback port\n  \n  // Check if we can get the port from window.location\n  if (window.location && window.location.port) {\n    wsPort = window.location.port;\n  }\n  \n  console.log(`Attempting to connect to WebSocket on port ${wsPort}`);\n  const wsConnection = new WebSocket(`ws://localhost:${wsPort}/ws`);\n  \n  wsConnection.onopen = () => {\n    console.log('WebSocket connected');\n    updateConnectionStatus('connected');\n    \n    // Reset reconnect attempts counter\n    setReconnectAttempts(0);\n    \n    // Request initial state\n    sendWebSocketMessage({ type: 'list_chats' }, wsConnection);  // Get available chats\n    sendWebSocketMessage({ type: 'get_head' }, wsConnection);    // Initial head query\n    sendWebSocketMessage({ type: 'list_models' }, wsConnection); // Get available models\n  };\n  \n  wsConnection.onclose = () => {\n    console.log('WebSocket disconnected');\n    updateConnectionStatus('disconnected');\n    elements.sendButton.disabled = true;\n    elements.generateButton.disabled = true;\n    \n    // Disconnection handling with exponential backoff\n    if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n      setReconnectAttempts(reconnectAttempts + 1);\n      setTimeout(connectWebSocket, RECONNECT_DELAY * Math.min(reconnectAttempts + 1, 30));\n    }\n  };\n  \n  wsConnection.onmessage = (event) => {\n    try {\n      const data = JSON.parse(event.data);\n      console.log('Received WebSocket message:', data);\n      \n      // Enhanced logging for debugging child actor issues\n      if (data.type === 'messages_updated' || data.type === 'head') {\n        console.log('HEAD UPDATE - Before processing:', {\n          oldHead: window.currentHead,\n          newHead: data.head,\n          messageChainLength: window.messageChain?.length || 0,\n          messageIDs: window.messageChain?.map(m => m.id) || []\n        });\n      } else if (data.type === 'message') {\n        console.log('MESSAGE RECEIVED - Details:', {\n          messageId: data.message?.id,\n          messageParents: data.message?.parents,\n          messageType: data.message?.data ? Object.keys(data.message.data)[0] : 'unknown',\n          currentChainLength: window.messageChain?.length || 0\n        });\n      }\n      \n      // Check if window variables are properly set before processing\n      if (data.type === 'head' || data.type === 'messages_updated') {\n        console.log('Window state before processing message:', { \n          messageChain: window.messageChain ? 'defined' : 'undefined',\n          currentHead: window.currentHead !== undefined ? 'defined' : 'undefined',\n          chats: window.chats ? 'defined' : 'undefined',\n          models: window.models ? 'defined' : 'undefined'\n        });\n      }\n      \n      // Handle the message\n      handleWebSocketMessage(data, wsConnection);\n      \n    } catch (error) {\n      console.error('WebSocket message processing error:', error);\n      console.error('Raw message:', event.data);\n      showError('Failed to process server message');\n    }\n  };\n\n  wsConnection.onerror = (error) => {\n    console.error('WebSocket error:', error);\n    console.error(`Failed to connect to WebSocket on port ${wsPort}`);\n    showError(`Connection error: Failed to connect on port ${wsPort}. Check your server is running.`);\n    \n    // Update UI to show disconnected state\n    updateConnectionStatus('disconnected');\n    elements.sendButton.disabled = true;\n    elements.generateButton.disabled = true;\n  };\n  \n  // Return the WebSocket connection\n  return wsConnection;\n}\n\n// Send a message through the WebSocket connection\nexport function sendWebSocketMessage(message, wsConnection) {\n  if (wsConnection?.readyState === WebSocket.OPEN) {\n    const messageStr = JSON.stringify(message);\n    console.log('Sending WebSocket message:', message);\n    wsConnection.send(messageStr);\n  } else {\n    console.error('Cannot send message: WebSocket not connected', message);\n    showError('Not connected to server');\n  }\n}\n\n// Request a specific message from the server\nexport function requestMessage(messageId, wsConnection) {\n  sendWebSocketMessage({\n    type: 'get_message',\n    message_id: messageId\n  }, wsConnection);\n}\n", "// Core application initialization\nimport { connectWebSocket } from '../services/websocket.js';\nimport { elements } from '../utils/elements.js';\nimport { initializeSidebars } from '../utils/ui.js';\n\n// Global state - exported for use in other modules\nexport let messageChain = [];\nexport let currentHead = null;\nexport let currentChatId = null;\nexport let chats = [];\nexport let models = [];\nexport let ws = null;\nexport let reconnectAttempts = 0;\nexport let totalCost = 0;\nexport let lastUsedModelId = null; // Track the last used model ID\nexport let isWaitingForResponse = false;\n\n// Also add to window object for global access\nwindow.messageChain = messageChain;\nwindow.currentHead = currentHead;\nwindow.currentChatId = currentChatId;\nwindow.chats = chats;\nwindow.models = models;\nwindow.ws = null; // Will be set later\nwindow.reconnectAttempts = reconnectAttempts;\nwindow.totalCost = totalCost;\nwindow.lastUsedModelId = lastUsedModelId;\nwindow.isWaitingForResponse = isWaitingForResponse;\n\nexport const MAX_RECONNECT_ATTEMPTS = 5;\nexport const RECONNECT_DELAY = 1000;\n\n// Track token usage stats\nexport let totalInputTokens = 0;\nexport let totalOutputTokens = 0;\nexport let totalMessages = 0;\n\n// Setter functions for mutable state\nexport function setMessageChain(newMessageChain) {\n  messageChain = newMessageChain;\n  window.messageChain = newMessageChain;\n}\n\nexport function setCurrentHead(newCurrentHead) {\n  currentHead = newCurrentHead;\n  window.currentHead = newCurrentHead;\n}\n\nexport function setCurrentChatId(newCurrentChatId) {\n  currentChatId = newCurrentChatId;\n  window.currentChatId = newCurrentChatId;\n}\n\nexport function setChats(newChats) {\n  chats = newChats;\n  window.chats = newChats;\n}\n\nexport function setModels(newModels) {\n  models = newModels;\n  window.models = newModels;\n}\n\nexport function setWs(newWs) {\n  ws = newWs;\n  window.ws = newWs;\n}\n\nexport function setReconnectAttempts(newReconnectAttempts) {\n  reconnectAttempts = newReconnectAttempts;\n  window.reconnectAttempts = newReconnectAttempts;\n}\n\nexport function setTotalCost(newTotalCost) {\n  totalCost = newTotalCost;\n  window.totalCost = newTotalCost;\n}\n\nexport function setLastUsedModelId(newLastUsedModelId) {\n  lastUsedModelId = newLastUsedModelId;\n  window.lastUsedModelId = newLastUsedModelId;\n}\n\nexport function setIsWaitingForResponse(newIsWaitingForResponse) {\n  isWaitingForResponse = newIsWaitingForResponse;\n  window.isWaitingForResponse = newIsWaitingForResponse;\n}\n\nexport function setTotalInputTokens(newTotalInputTokens) {\n  totalInputTokens = newTotalInputTokens;\n}\n\nexport function setTotalOutputTokens(newTotalOutputTokens) {\n  totalOutputTokens = newTotalOutputTokens;\n}\n\nexport function setTotalMessages(newTotalMessages) {\n  totalMessages = newTotalMessages;\n}\n\n// Reset the state (useful for chat switching)\nexport function resetState() {\n  messageChain = [];\n  currentHead = null;\n  lastUsedModelId = null;\n  isWaitingForResponse = false;\n  \n  // Also reset window variables\n  window.messageChain = [];\n  window.currentHead = null;\n  window.lastUsedModelId = null;\n  window.isWaitingForResponse = false;\n}\n\n// Initialize the application\nexport function initializeApp() {\n  console.log('Initializing chat application...');\n  \n  // Initialize UI components\n  initializeSidebars();\n  \n  // Connect to WebSocket\n  const wsConnection = connectWebSocket();\n  setWs(wsConnection);\n  \n  // Check if global variables are properly set\n  console.log('Global state initialization:', { \n    windowMessageChain: window.messageChain ? 'defined' : 'undefined',\n    windowCurrentHead: window.currentHead !== undefined ? 'defined' : 'undefined',\n    windowChats: window.chats ? 'defined' : 'undefined',\n    windowWS: window.ws ? 'defined' : 'undefined',\n  });\n  \n  console.log('Application initialization complete');\n}\n", "// Clipboard utilities for copying text\nimport { messageChain } from '../components/app.js';\nimport { showCopySuccess, showError } from './ui.js';\n\n// Copy message text to clipboard\nexport function copyMessageText(messageId) {\n  // Find the message in the message chain\n  const message = messageChain.find(m => m.id === messageId);\n  if (!message) return;\n  \n  // Extract the content based on the message type\n  let content = '';\n  if (message.data.Chat) {\n    if (message.data.Chat.User) {\n      content = message.data.Chat.User.content;\n    } else if (message.data.Chat.Assistant) {\n      const assistantMsg = message.data.Chat.Assistant;\n      // Handle nested structure\n      if (assistantMsg.Claude) {\n        content = assistantMsg.Claude.content;\n      } else if (assistantMsg.Gemini) {\n        content = assistantMsg.Gemini.content;\n      } else if (assistantMsg.OpenRouter) {\n        content = assistantMsg.OpenRouter.content;\n      } else {\n        // Fallback for older structure\n        content = assistantMsg.content || '';\n      }\n    }\n  } \n  \n  // Copy to clipboard\n  navigator.clipboard.writeText(content)\n    .then(() => {\n      showCopySuccess('Text copied to clipboard');\n    })\n    .catch(err => {\n      console.error('Failed to copy text: ', err);\n      showError('Failed to copy text');\n    });\n}\n\n// Copy message ID to clipboard\nexport function copyMessageId(messageId) {\n  // Copy the message ID to clipboard\n  navigator.clipboard.writeText(messageId)\n    .then(() => {\n      showCopySuccess('ID copied to clipboard');\n    })\n    .catch(err => {\n      console.error('Failed to copy ID: ', err);\n      showError('Failed to copy ID');\n    });\n}\n", "// Main entry point for the chat application\nimport { initializeApp } from './components/app.js';\nimport { setupEventListeners } from './components/events.js';\nimport { checkMobileView } from './utils/responsive.js';\n\n// Initialize the application when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Initialize the chat application\n  initializeApp();\n  \n  // Set up event listeners\n  setupEventListeners();\n  \n  // Check for mobile view on load\n  checkMobileView();\n  \n  // Handle window resize\n  window.addEventListener('resize', checkMobileView);\n});\n", "// Event handling setup for the chat interface\nimport { elements } from '../utils/elements.js';\nimport { connectWebSocket } from '../services/websocket.js';\nimport { sendMessage, generateLlmResponse, createNewChat, branchChat } from './chat.js';\nimport { toggleChatSidebar, toggleChatControlsSidebar, toggleSection, scrollToBottom } from '../utils/ui.js';\nimport { copyMessageText, copyMessageId } from '../utils/clipboard.js';\nimport { updateModelInfo } from './model-selector.js';\n\n// Setup all event listeners\nexport function setupEventListeners() {\n  console.log('Setting up event listeners...');\n  \n  // Auto-resize textarea and update button states\n  elements.messageInput?.addEventListener('input', () => {\n    elements.messageInput.style.height = 'auto';\n    elements.messageInput.style.height = Math.min(elements.messageInput.scrollHeight, 120) + 'px';\n    elements.sendButton.disabled = !elements.messageInput.value.trim();\n  });\n  \n  // Add keyboard shortcut for focusing message input\n  document.addEventListener('keydown', (event) => {\n    if (event.key === '\\\\') {\n      event.preventDefault(); // Prevent the \\ from being typed\n      elements.messageInput?.focus();\n    }\n  });\n  \n  // One event handler for all keyboard shortcuts in the message input\n  elements.messageInput?.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n      // Shift+Enter to send message\n      if (event.shiftKey) {\n        event.preventDefault();\n        console.log('Sending message with Shift+Enter');\n        sendMessage(window.ws);\n      }\n      // Ctrl+Enter or Cmd+Enter to generate response\n      else if (event.ctrlKey || event.metaKey) {\n        event.preventDefault();\n        console.log('Generating response with Ctrl/Cmd+Enter');\n        generateLlmResponse(window.ws);\n      }\n    }\n  });\n  \n  // Button click handlers\n  elements.sendButton?.addEventListener('click', () => sendMessage(window.ws));\n  elements.generateButton?.addEventListener('click', () => generateLlmResponse(window.ws));\n  \n  // Chat sidebar toggle handlers\n  elements.collapseChatSidebarButton?.addEventListener('click', toggleChatSidebar);\n  elements.expandChatSidebarButton?.addEventListener('click', toggleChatSidebar);\n  \n  // Chat controls sidebar toggle handlers\n  elements.collapseChatControlsButton?.addEventListener('click', toggleChatControlsSidebar);\n  elements.expandChatControlsButton?.addEventListener('click', toggleChatControlsSidebar);\n  \n  // Model selector change handler\n  elements.controlsModelSelector?.addEventListener('change', updateModelInfo);\n  \n  // New chat button\n  elements.newChatButton?.addEventListener('click', () => createNewChat(window.ws));\n  \n  // Branch chat button\n  elements.branchChatButton?.addEventListener('click', () => branchChat(window.ws));\n  \n  // Expose certain functions to the global scope for use in inline event handlers\n  // This is necessary because our bundled code won't have these functions directly accessible\n  window.switchChat = (chatId) => import('./chat.js').then(m => m.switchChat(chatId, window.ws));\n  window.showRenameChat = (chatId, name) => import('./chat.js').then(m => m.showRenameChat(chatId, name));\n  window.confirmDeleteChat = (chatId) => import('./chat.js').then(m => m.confirmDeleteChat(chatId));\n  window.copyMessageText = (messageId) => import('../utils/clipboard.js').then(m => m.copyMessageText(messageId));\n  window.copyMessageId = (messageId) => import('../utils/clipboard.js').then(m => m.copyMessageId(messageId));\n  window.toggleSection = (sectionId) => import('../utils/ui.js').then(m => m.toggleSection(sectionId));\n  \n  console.log('Event listeners setup complete');\n}\n\n// Cleanup function to remove event listeners\nexport function cleanupEventListeners() {\n  // Close WebSocket connection\n  if (window.ws) {\n    window.ws.close();\n  }\n  \n  // Remove all added event listeners\n  // ... (would need to store references to added event listeners for proper cleanup)\n}\n\n// Initialize and attach to window unload event for cleanup\nwindow.addEventListener('unload', cleanupEventListeners);\n", "// Responsive design utilities\nimport { elements } from './elements.js';\n\n// Check if mobile view and collapse sidebar if needed\nexport function checkMobileView() {\n  const isMobile = window.innerWidth <= 768;\n  \n  if (isMobile) {\n    // Collapse both sidebars on mobile\n    if (elements.chatSidebar) {\n      elements.chatSidebar.classList.add('collapsed');\n      if (elements.expandChatSidebarButton) {\n        elements.expandChatSidebarButton.classList.add('visible');\n      }\n    }\n    \n    if (elements.chatControlsSidebar) {\n      elements.chatControlsSidebar.classList.add('collapsed');\n      if (elements.expandChatControlsButton) {\n        elements.expandChatControlsButton.classList.add('visible');\n      }\n    }\n  } else if (window.innerWidth <= 1200) {\n    // On tablets, only collapse the controls sidebar\n    if (elements.chatControlsSidebar) {\n      elements.chatControlsSidebar.classList.add('collapsed');\n      if (elements.expandChatControlsButton) {\n        elements.expandChatControlsButton.classList.add('visible');\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["getElement", "id", "elements", "init_elements", "__esmMin", "ui_exports", "__export", "initializeSidebars", "renderEmptyState", "scrollToBottom", "showCopySuccess", "showError", "showSuccess", "toggleChatControlsSidebar", "toggleChatSidebar", "toggleSection", "updateConnectionStatus", "updateCurrentChatName", "updateStatsDisplay", "updateTotalCostDisplay", "status", "elements", "isConnected", "message", "errorDiv", "successDiv", "currentChat", "chat", "displayName", "costElement", "sectionId", "init_ui", "__esmMin", "init_elements", "init_app", "sortMessageChain", "messageChain", "currentHead", "messagesById", "msg", "visited", "result", "missingParents", "processMessage", "message", "level", "parentId", "parent", "init_message_chain", "__esmMin", "init_app", "formatMessageContent", "content", "text", "_", "code", "init_formatters", "__esmMin", "models_exports", "__export", "calculateMessageCost", "findLastUsedModel", "getModelMaxTokens", "getModelPricing", "sortedMessages", "sortMessageChain", "i", "message", "assistantMsg", "model", "setLastUsedModelId", "modelId", "models", "m", "usage", "addToTotal", "lastUsedModelId", "pricing", "inputTokens", "outputTokens", "inputCost", "outputCost", "messageCost", "setTotalCost", "totalCost", "setTotalInputTokens", "totalInputTokens", "setTotalOutputTokens", "totalOutputTokens", "setTotalMessages", "totalMessages", "updateStatsDisplay", "init_models", "__esmMin", "init_app", "init_message_chain", "init_ui", "typing_indicator_exports", "__export", "addTypingIndicator", "removeTypingIndicator", "typingIndicator", "elements", "scrollToBottom", "indicator", "init_typing_indicator", "__esmMin", "init_elements", "init_ui", "chat_exports", "__export", "branchChat", "confirmDeleteChat", "createNewChat", "generateLlmResponse", "renderChatList", "renderMessage", "renderMessages", "sendMessage", "showRenameChat", "switchChat", "sortedMessages", "sortMessageChain", "elements", "renderEmptyState", "message", "msg", "formatMessageContent", "assistantMsg", "content", "model", "usage", "stopReason", "providerName", "costDisplay", "claude", "inputCost", "outputCost", "gemini", "openrouter", "getModelMaxTokens", "sortedChats", "chats", "a", "b", "chat", "currentChatId", "wsConnection", "chatName", "showError", "trimmedName", "tempId", "tempChat", "updatedChats", "setChats", "tempChatElement", "sendWebSocketMessage", "setMessageChain", "setCurrentHead", "c", "currentHead", "chatId", "setLastUsedModelId", "currentName", "decodedCurrentName", "newName", "chatElement", "originalText", "messageChain", "tempMessage", "updatedMessageChain", "scrollToBottom", "modelId", "setIsWaitingForResponse", "addTypingIndicator", "init_chat", "__esmMin", "init_app", "init_elements", "init_message_chain", "init_formatters", "init_ui", "init_models", "init_websocket", "model_selector_exports", "__export", "populateModelSelector", "updateModelInfo", "updateModelSelector", "elements", "models", "currentSelection", "claudeModels", "m", "geminiModels", "openrouterModels", "sortedClaudeModels", "a", "b", "claudeGroup", "model", "option", "geminiGroup", "openrouterGroup", "lastUsedModelId", "selectedModelId", "maxTokens", "getModelMaxTokens", "modelInfo", "costInfoElem", "pricing", "getModelPricing", "init_model_selector", "__esmMin", "init_app", "init_elements", "init_models", "handleNewMessage", "message", "wsConnection", "messageChain", "m", "tempMessagesCount", "filteredMessageChain", "setMessageChain", "assistantMsg", "claude", "inputCost", "outputCost", "setTotalCost", "totalCost", "setTotalInputTokens", "totalInputTokens", "setTotalOutputTokens", "totalOutputTokens", "setTotalMessages", "totalMessages", "updateStatsDisplay", "calculateMessageCost", "setLastUsedModelId", "gemini", "openrouter", "updateModelSelector", "parentId", "requestMessage", "setIsWaitingForResponse", "removeTypingIndicator", "elements", "renderMessages", "scrollToBottom", "init_message", "__esmMin", "init_app", "init_elements", "init_websocket", "init_chat", "init_ui", "init_typing_indicator", "handleWebSocketMessage", "data", "wsConnection", "handleHeadUpdate", "handleNewMessage", "handleChatsUpdate", "handleChatCreated", "handleChatRenamed", "handleChatDeleted", "handleModelsList", "handleError", "setCurrentChatId", "updateCurrentChatName", "renderChatList", "setCurrentHead", "elements", "requestMessage", "findLastUsedModel", "setChats", "updatedChats", "c", "index", "resetState", "renderEmptyState", "showSuccess", "showError", "oldName", "setModels", "populateModelSelector", "updateModelInfo", "init_message_handler", "__esmMin", "init_app", "init_elements", "init_ui", "init_chat", "init_model_selector", "init_models", "init_websocket", "init_message", "init_typing_indicator", "connectWebSocket", "updateConnectionStatus", "wsPort", "wsConnection", "setReconnectAttempts", "sendWebSocketMessage", "elements", "reconnectAttempts", "MAX_RECONNECT_ATTEMPTS", "RECONNECT_DELAY", "event", "data", "m", "handleWebSocketMessage", "error", "showError", "message", "messageStr", "requestMessage", "messageId", "init_websocket", "__esmMin", "init_app", "init_elements", "init_ui", "init_message_handler", "app_exports", "__export", "MAX_RECONNECT_ATTEMPTS", "RECONNECT_DELAY", "chats", "currentChatId", "currentHead", "initializeApp", "isWaitingForResponse", "lastUsedModelId", "messageChain", "models", "reconnectAttempts", "resetState", "setChats", "setCurrentChatId", "setCurrentHead", "setIsWaitingForResponse", "setLastUsedModelId", "setMessageChain", "setModels", "setReconnectAttempts", "setTotalCost", "setTotalInputTokens", "setTotalMessages", "setTotalOutputTokens", "setWs", "totalCost", "totalInputTokens", "totalMessages", "totalOutputTokens", "ws", "newMessageChain", "newCurrentHead", "newCurrentChatId", "newChats", "newModels", "newWs", "newReconnectAttempts", "newTotalCost", "newLastUsedModelId", "newIsWaitingForResponse", "newTotalInputTokens", "newTotalOutputTokens", "newTotalMessages", "initializeSidebars", "wsConnection", "connectWebSocket", "init_app", "__esmMin", "init_websocket", "init_elements", "init_ui", "clipboard_exports", "__export", "copyMessageId", "copyMessageText", "messageId", "message", "messageChain", "m", "content", "assistantMsg", "showCopySuccess", "err", "showError", "init_clipboard", "__esmMin", "init_app", "init_ui", "init_app", "init_elements", "init_websocket", "init_chat", "init_ui", "init_clipboard", "init_model_selector", "setupEventListeners", "elements", "event", "sendMessage", "generateLlmResponse", "toggleChatSidebar", "toggleChatControlsSidebar", "updateModelInfo", "createNewChat", "branchChat", "chatId", "m", "name", "messageId", "sectionId", "cleanupEventListeners", "init_elements", "checkMobileView", "elements", "initializeApp", "setupEventListeners", "checkMobileView"]
}
